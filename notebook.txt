Engineering Notebook
=============================================

4/4 (Tues) evening
=============================================
Initial ideas:
- In each server program, store unordered mapping from username to all messages sent to that username
    - In order!
- Update all server programs EVERY time a new message comes in from ANY user
- All clients connect to a main server
- Two backup servers indepedently connect to the main server almost as if they were clients
- Main client-server interactions still function as before but we maintain log of all previous messages
- Whenever a client sends a message through the server to another, the server sends copies to both backup servers
- Backup servers have a hierarchy: server 2, server 3
- If the main server dies, all users are logged out and they reconnect to server 2
- Server 3 connects to server 2 to continue being its backup
- Optional: if server 1 comes back up, it should reconnect to server 2 (or server 3 if it has become main) to now 
  join the circulation as its backup?

4/8 (Sat) afternoon
=============================================
- Implemented some version of backup server acknowledgement 
- Implemented the primary server sending a log entry to the backup servers, and the backup server parsing that entry
TODO:
- Integrate primary server and backup server implementation into one program (through threading)
- Code to run:
g++ -o server_t2 server_t2.cc --std=c++11 
./server_t2 10.250.2.9 5000 1
./server_t2 10.250.2.9 5000 0
./server_t2 10.250.2.9 5000 0

4/8 (Sat) evening
=============================================
- Combined primary and backup server implementation in one program 
    - There is a thread for the backup server, and the main program is for the primary server
- Handled the case where primary server crashes: flip a coin to determine which backup server becomes primary, and which backup server stays as backup
- Implemented backup -> primary: exit out of backup thread, and start a new listening socket
    - We ran into a bug where the primary program could not bind a listener socket to the same port
        - Solution: sleep for 1 second before the new primary attempts to bind a listener socket to that same port
- Implemented passing state updates between from primary to backups:
    - Message from one client to another
    - Account creation
    - Account deletion
TODO: 
- Handle what happens when one *backup* server fails or crashes
- Handle what happens when there is only one primary server + one backup up
    - Disallow a client from joining before the second backup server comes up
- Handle the case where client does Ctrl+C

4/9 (Sun) afternoon
=============================================
- Handled what happens when one *backup* server fails or crashes
    - Originally, in our implementation, the backup server could not talk to the primary server
        - We worked around this by adding the backup server to the clientfds fd_set, so that the primary server can listen for messages from it too
- Handled what happens when there is only one primary server + one backup up
    - Disallowed a client from joining before the second backup server comes up
    - In general, the primary server can discern when an incoming connection is from a backup server, and when it is from a client
        - And these can happen out of order!
TODO:
- Handle the case where client does Ctrl+C
- After server goes down and client logs back in, send client the entire log associated with that client
